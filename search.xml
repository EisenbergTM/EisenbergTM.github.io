<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS 7 版本及以上环境端口开放</title>
    <url>/2020/05/06/CentOS-7-%E7%89%88%E6%9C%AC%E5%8F%8A%E4%BB%A5%E4%B8%8A%E7%8E%AF%E5%A2%83%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE/</url>
    <content><![CDATA[<h2 id="CentOS-7-可使用firewalld打开和查看防火墙以及端口"><a href="#CentOS-7-可使用firewalld打开和查看防火墙以及端口" class="headerlink" title="CentOS 7 可使用firewalld打开和查看防火墙以及端口"></a>CentOS 7 可使用firewalld打开和查看防火墙以及端口</h2><h3 id="firewalld的基本使用："><a href="#firewalld的基本使用：" class="headerlink" title="firewalld的基本使用："></a>firewalld的基本使用：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 启动： systemctl start firewalld</span><br><span class="line">- 关闭： systemctl stop firewalld</span><br><span class="line">- 查看状态： systemctl status firewalld </span><br><span class="line">- 开机禁用  ： systemctl disable firewalld</span><br><span class="line">- 开机启用  ： systemctl enable firewalld</span><br></pre></td></tr></table></figure>

<h3 id="systemctl服务管理（融合service和chkconfig）"><a href="#systemctl服务管理（融合service和chkconfig）" class="headerlink" title="systemctl服务管理（融合service和chkconfig）"></a>systemctl服务管理（融合service和chkconfig）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 启动一个服务：systemctl start firewalld.service</span><br><span class="line">- 关闭一个服务：systemctl stop firewalld.service</span><br><span class="line">- 重启一个服务：systemctl restart firewalld.service</span><br><span class="line">- 显示一个服务的状态：systemctl status firewalld.service</span><br><span class="line">- 在开机时启用一个服务：systemctl enable firewalld.service</span><br><span class="line">- 在开机时禁用一个服务：systemctl disable firewalld.service</span><br><span class="line">- 查看服务是否开机启动：systemctl is-enabled firewalld.service</span><br><span class="line">- 查看已启动的服务列表：systemctl list-unit-files|grep enabled</span><br><span class="line">- 查看启动失败的服务列表：systemctl --failed</span><br></pre></td></tr></table></figure>

<h3 id="配置firewall-cmd"><a href="#配置firewall-cmd" class="headerlink" title="配置firewall-cmd"></a>配置firewall-cmd</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 查看版本： firewall-cmd --version</span><br><span class="line">- 查看帮助： firewall-cmd --help</span><br><span class="line">- 显示状态： firewall-cmd --state</span><br><span class="line">- 查看所有打开的端口： firewall-cmd --zone&#x3D;public --list-ports</span><br><span class="line">- 更新防火墙规则： firewall-cmd --reload</span><br><span class="line">- 查看区域信息:  firewall-cmd --get-active-zones</span><br><span class="line">- 查看指定接口所属区域： firewall-cmd --get-zone-of-interface&#x3D;eth0</span><br><span class="line">- 拒绝所有包：firewall-cmd --panic-on</span><br><span class="line">- 取消拒绝状态： firewall-cmd --panic-off</span><br><span class="line">- 查看是否拒绝： firewall-cmd --query-panic</span><br></pre></td></tr></table></figure>

<h3 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 添加：firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br><span class="line">- 重新载入：firewall-cmd --reload</span><br><span class="line">- 查看：firewall-cmd --zone&#x3D; public --query-port&#x3D;8080&#x2F;tcp</span><br><span class="line">- 删除：firewall-cmd --zone&#x3D; public --remove-port&#x3D;8080&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>CentOS</tag>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux related</title>
    <url>/2020/05/06/Linux-related/</url>
    <content><![CDATA[<h3 id="linux中-vi-vim显示行号或取消行号命令"><a href="#linux中-vi-vim显示行号或取消行号命令" class="headerlink" title="linux中 vi / vim显示行号或取消行号命令"></a>linux中 vi / vim显示行号或取消行号命令</h3><ul>
<li>显示行号<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set number</span><br></pre></td></tr></table></figure>
或者<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set nu</span><br></pre></td></tr></table></figure></li>
<li>取消行号显示<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set nu!</span><br></pre></td></tr></table></figure></li>
<li>每次打开都显示行号<br>修改vi ~/.vimrc 文件，添加：set number</li>
</ul>
<h3 id="修改文件拥有者以及组用户"><a href="#修改文件拥有者以及组用户" class="headerlink" title="修改文件拥有者以及组用户"></a>修改文件拥有者以及组用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown  xxx file</span><br><span class="line">chgrp  xxx file</span><br></pre></td></tr></table></figure>

<h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><table>
<thead>
<tr>
<th>权限</th>
<th>数值</th>
</tr>
</thead>
<tbody><tr>
<td>rwx rw- r-</td>
<td>764</td>
</tr>
<tr>
<td>rw- r- r-</td>
<td>644</td>
</tr>
<tr>
<td>rw- rw- r-</td>
<td>664</td>
</tr>
</tbody></table>
<h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh-key"></a>生成ssh-key</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &quot;&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>4种方法解决MongoDB游标超时的问题</title>
    <url>/2020/05/10/4%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3MongoDB%E6%B8%B8%E6%A0%87%E8%B6%85%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们使用Python从MongoDB里面读取数据时，可能会这样写代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">handler &#x3D; pymongo.MongoClient().db.col</span><br><span class="line"></span><br><span class="line">for row in handler.find():</span><br><span class="line">    parse_data(row)</span><br></pre></td></tr></table></figure>
<p>短短4行代码，读取MongoDB里面的每一行数据，然后传入parse_data做处理。处理完成以后再读取下一行。逻辑清晰而简单，能有什么问题？只要parse_data(row)不报错，这一段代码就完美无缺。<br>但事实并非这样。<br>你的代码可能会在for row in handler.find()这一行报错。它的原因，说来话长。<br>要解释这个问题，我们首先就需要知道，handler.find()返回的并不是数据库里面的数据，而是一个游标（cursor）对象。<br>只有当你使用for循环开始迭代它的时候，游标才会真正去数据库里面读取数据。<br>但是，如果每一次循环都连接数据库，那么网络连接会浪费大量时间。<br>所以pymongo会一次性获取100行，for row in handler.find()循环第一次的时候，它会连上MongoDB，读取一百条数据，缓存到内存中。于是第2-100次循环，数据都是直接从内存里面获取，不会再连接数据库。<br>当循环进行到底101次的时候，再一次连接数据库，再读取第101-200行内容……<br>这个逻辑非常有效地降低了网络I/O耗时。<br>但是，MongoDB默认游标的超时时间是10分钟。10分钟之内，必需再次连接MongoDB读取内容刷新游标时间，否则，就会导致游标超时报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pymongo.errors.CursorNotFound: cursor id 211526444773 not found</span><br></pre></td></tr></table></figure>
<p>为了解决这个问题，我们有4种办法：</p>
<ul>
<li>修改MongoDB的配置，延长游标超时时间，并重启MongoDB。由于生产环境的MongoDB不能随便重启，所以这个方案虽然有用，但是排除。</li>
<li>一次性把数据全部读取下来，再做处理：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all_data &#x3D; [row for row in handler.find()]</span><br><span class="line"></span><br><span class="line">for row in all_data:</span><br><span class="line">    parse(row)</span><br></pre></td></tr></table></figure>
这种方案的弊端也很明显，如果数据量非常大，你不一定能全部放到内存里面。即使能够全部放到内存中，但是列表推导式遍历了所有数据，紧接着for循环又遍历一次，浪费时间。</li>
<li>让游标每次返回的数据小于100条，这样消费完这一批数据的时间就会小于10分钟：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每次连接数据库，只返回50行数据</span><br><span class="line">for row in handler.find().batch_size(50): </span><br><span class="line">    parse_data(row)</span><br></pre></td></tr></table></figure>
但这种方案会增加数据库的连接次数，从而增加I/O耗时。</li>
<li>让游标永不超时。通过设定参数no_cursor_timeout=True，让游标永不超时：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cursor &#x3D; handler.find(no_cursor_timeout&#x3D;True)</span><br><span class="line">for row in cursor:</span><br><span class="line">    parse_data(row)</span><br><span class="line">cursor.close()  # 一定要手动关闭游标</span><br></pre></td></tr></table></figure>
然而这个操作非常危险，因为如果你的Python程序因为某种原因意外停止了，这个游标就再也无法关闭了！除非重启MongoDB，否则这些游标会一直留在MongoDB上，占用资源。<br>当然可能有人会说，使用try…except把读取数据的地方包住，只要抛出了异常，在处理异常的时候关闭游标即可：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cursor &#x3D; handler.find(no_cursor_timeout&#x3D;True)</span><br><span class="line">try:</span><br><span class="line">    for row in cursor:</span><br><span class="line">        parse_data(row)</span><br><span class="line">except Exception:</span><br><span class="line">    parse_exception()</span><br><span class="line">finally:</span><br><span class="line">    cursor.close()  # 一定要手动关闭游标</span><br></pre></td></tr></table></figure>
其中finally里面的代码，无论有没有异常，都会执行。</li>
</ul>
<p>但这样写会让代码非常难看。为了解决这个问题，我们可以使用游标的上下文管理器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with handler.find(no_cursor_timeout&#x3D;True) as cursor:</span><br><span class="line">    for row in cursor:</span><br><span class="line">        parse_data(row)</span><br></pre></td></tr></table></figure>
<p>只要程序退出了with的缩进，游标自动就会关闭。如果程序中途报错，游标也会关闭。</p>
<p>它的原理可以用下面两段代码来解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Test:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.x &#x3D; 1</span><br><span class="line"></span><br><span class="line">    def echo(self):</span><br><span class="line">        print(self.x)</span><br><span class="line"></span><br><span class="line">    def __enter__(self):</span><br><span class="line">        print(&#39;进入上下文&#39;)</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, *args):</span><br><span class="line">        print(&#39;退出上下文&#39;)</span><br><span class="line">        </span><br><span class="line">with Test() as t:</span><br><span class="line">    t.echo()</span><br><span class="line">print(&#39;退出缩进&#39;)</span><br></pre></td></tr></table></figure>
<h2 id="转载地址"><a href="#转载地址" class="headerlink" title="转载地址"></a><a href="https://juejin.im/post/5d555eb45188255d51425bda" target="_blank" rel="noopener">转载地址</a></h2>]]></content>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>修改时区</title>
    <url>/2020/05/14/%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Set-or-Change-the-Time-Zone-in-Linux"><a href="#Set-or-Change-the-Time-Zone-in-Linux" class="headerlink" title="Set or Change the Time Zone in Linux"></a>Set or Change the Time Zone in Linux</h2><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><ul>
<li><p>way 1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                      Local time: Tue 2019-12-03 16:30:44 UTC</span><br><span class="line">                  Universal time: Tue 2019-12-03 16:30:44 UTC</span><br><span class="line">                        RTC time: Tue 2019-12-03 16:30:44</span><br><span class="line">                       Time zone: Etc&#x2F;UTC (UTC, +0000)</span><br><span class="line">       System clock synchronized: no</span><br><span class="line">systemd-timesyncd.service active: yes</span><br><span class="line">                 RTC in local TZ: no</span><br></pre></td></tr></table></figure>
<p>The output above shows that the system’s time zone is set to UTC.<br>The system time zone is configured by symlinking the /etc/localtime file to a binary time zone’s identifier in the /usr/share/zoneinfo directory.</p>
</li>
<li><p>Another way to check the time zone is to view the path the symlink points to using the ls command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 27 Dec  3 16:29 &#x2F;etc&#x2F;localtime -&gt; &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Etc&#x2F;UTC</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Changing-the-Time-Zone-in-Linux"><a href="#Changing-the-Time-Zone-in-Linux" class="headerlink" title="Changing the Time Zone in Linux"></a>Changing the Time Zone in Linux</h3><p>To view all available time zones, use the timedatectl command or list the files in the /usr/share/zoneinfo directory:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timedatectl list-timezones</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">America&#x2F;Montserrat</span><br><span class="line">America&#x2F;Nassau</span><br><span class="line">America&#x2F;New_York</span><br><span class="line">America&#x2F;Nipigon</span><br><span class="line">America&#x2F;Nome</span><br><span class="line">America&#x2F;Noronha</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Once you identify which time zone is accurate to your location, run the following command as root or sudo user:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-timezone &lt;your_time_zone&gt;</span><br></pre></td></tr></table></figure>
<p>For example, to change the system’s timezone to America/New_York you would type:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-timezone America&#x2F;New_York</span><br></pre></td></tr></table></figure>
<p>To verify the change, invoke the timedatectl command again:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                      Local time: Tue 2019-12-03 13:55:09 EST</span><br><span class="line">                  Universal time: Tue 2019-12-03 18:55:09 UTC</span><br><span class="line">                        RTC time: Tue 2019-12-03 18:02:16</span><br><span class="line">                       Time zone: America&#x2F;New_York (EST, -0500)</span><br><span class="line">       System clock synchronized: no</span><br><span class="line">systemd-timesyncd.service active: yes</span><br><span class="line">                 RTC in local TZ: no</span><br></pre></td></tr></table></figure>
<p>Mission accomplished! You’ve successfully changed your system’s time zone.</p>
<p>Changing the Time Zone by Creating a Symlink<br>If you are running an older Linux distribution and the timedatectl utility is not present on your system, you can change the timezone by symlinking /etc/localtime to the time zone in the /usr/share/zoneinfo directory.</p>
<p>Remove the current symlink or file:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>
<p>Identify the timezone you want to configure and create a symlink:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;America&#x2F;New_York &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>
<p>Verify it either by listing the /etc/localtime file or invoking the date command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure>
<p>The output includes the time zone, in this example that is “EST”.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tue Dec  3 14:10:54 EST 2019</span><br></pre></td></tr></table></figure>
<p>Conclusion<br>To change the time zone in Linux systems use the sudo timedatectl set-timezone command followed by the long name of the time zone you want to set.</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>timezone</tag>
      </tags>
  </entry>
</search>
